"use strict";
(self["webpackChunkvshb_local"] = self["webpackChunkvshb_local"] || []).push([["vendors-node_modules_tsparticles_updater-out-modes_browser_OutOfCanvasUpdater_js"],{

/***/ "./node_modules/@tsparticles/updater-out-modes/browser/BounceOutMode.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tsparticles/updater-out-modes/browser/BounceOutMode.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BounceOutMode: () => (/* binding */ BounceOutMode)
/* harmony export */ });
/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ "./node_modules/@tsparticles/engine/browser/index.js");
/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils.js */ "./node_modules/@tsparticles/updater-out-modes/browser/Utils.js");


class BounceOutMode {
    constructor(container) {
        this.container = container;
        this.modes = [
            "bounce",
            "split",
        ];
    }
    update(particle, direction, delta, outMode) {
        if (!this.modes.includes(outMode)) {
            return;
        }
        const container = this.container;
        let handled = false;
        for (const [, plugin] of container.plugins) {
            if (plugin.particleBounce !== undefined) {
                handled = plugin.particleBounce(particle, delta, direction);
            }
            if (handled) {
                break;
            }
        }
        if (handled) {
            return;
        }
        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.calculateBounds)(pos, size), canvasSize = container.canvas.size;
        (0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__.bounceHorizontal)({ particle, outMode, direction, bounds, canvasSize, offset, size });
        (0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__.bounceVertical)({ particle, outMode, direction, bounds, canvasSize, offset, size });
    }
}


/***/ }),

/***/ "./node_modules/@tsparticles/updater-out-modes/browser/DestroyOutMode.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@tsparticles/updater-out-modes/browser/DestroyOutMode.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DestroyOutMode: () => (/* binding */ DestroyOutMode)
/* harmony export */ });
/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ "./node_modules/@tsparticles/engine/browser/index.js");

const minVelocity = 0;
class DestroyOutMode {
    constructor(container) {
        this.container = container;
        this.modes = ["destroy"];
    }
    update(particle, direction, _delta, outMode) {
        if (!this.modes.includes(outMode)) {
            return;
        }
        const container = this.container;
        switch (particle.outType) {
            case "normal":
            case "outside":
                if ((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.isPointInside)(particle.position, container.canvas.size, _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.Vector.origin, particle.getRadius(), direction)) {
                    return;
                }
                break;
            case "inside": {
                const { dx, dy } = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getDistances)(particle.position, particle.moveCenter), { x: vx, y: vy } = particle.velocity;
                if ((vx < minVelocity && dx > particle.moveCenter.radius) ||
                    (vy < minVelocity && dy > particle.moveCenter.radius) ||
                    (vx >= minVelocity && dx < -particle.moveCenter.radius) ||
                    (vy >= minVelocity && dy < -particle.moveCenter.radius)) {
                    return;
                }
                break;
            }
        }
        container.particles.remove(particle, undefined, true);
    }
}


/***/ }),

/***/ "./node_modules/@tsparticles/updater-out-modes/browser/NoneOutMode.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@tsparticles/updater-out-modes/browser/NoneOutMode.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NoneOutMode: () => (/* binding */ NoneOutMode)
/* harmony export */ });
/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ "./node_modules/@tsparticles/engine/browser/index.js");

const minVelocity = 0;
class NoneOutMode {
    constructor(container) {
        this.container = container;
        this.modes = ["none"];
    }
    update(particle, direction, delta, outMode) {
        if (!this.modes.includes(outMode)) {
            return;
        }
        if ((particle.options.move.distance.horizontal &&
            (direction === "left" || direction === "right")) ??
            (particle.options.move.distance.vertical &&
                (direction === "top" || direction === "bottom"))) {
            return;
        }
        const gravityOptions = particle.options.move.gravity, container = this.container, canvasSize = container.canvas.size, pRadius = particle.getRadius();
        if (!gravityOptions.enable) {
            if ((particle.velocity.y > minVelocity && particle.position.y <= canvasSize.height + pRadius) ||
                (particle.velocity.y < minVelocity && particle.position.y >= -pRadius) ||
                (particle.velocity.x > minVelocity && particle.position.x <= canvasSize.width + pRadius) ||
                (particle.velocity.x < minVelocity && particle.position.x >= -pRadius)) {
                return;
            }
            if (!(0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.isPointInside)(particle.position, container.canvas.size, _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.Vector.origin, pRadius, direction)) {
                container.particles.remove(particle);
            }
        }
        else {
            const position = particle.position;
            if ((!gravityOptions.inverse &&
                position.y > canvasSize.height + pRadius &&
                direction === "bottom") ||
                (gravityOptions.inverse && position.y < -pRadius && direction === "top")) {
                container.particles.remove(particle);
            }
        }
    }
}


/***/ }),

/***/ "./node_modules/@tsparticles/updater-out-modes/browser/OutOfCanvasUpdater.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@tsparticles/updater-out-modes/browser/OutOfCanvasUpdater.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OutOfCanvasUpdater: () => (/* binding */ OutOfCanvasUpdater)
/* harmony export */ });
/* harmony import */ var _BounceOutMode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BounceOutMode.js */ "./node_modules/@tsparticles/updater-out-modes/browser/BounceOutMode.js");
/* harmony import */ var _DestroyOutMode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DestroyOutMode.js */ "./node_modules/@tsparticles/updater-out-modes/browser/DestroyOutMode.js");
/* harmony import */ var _NoneOutMode_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NoneOutMode.js */ "./node_modules/@tsparticles/updater-out-modes/browser/NoneOutMode.js");
/* harmony import */ var _OutOutMode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./OutOutMode.js */ "./node_modules/@tsparticles/updater-out-modes/browser/OutOutMode.js");




const checkOutMode = (outModes, outMode) => {
    return (outModes.default === outMode ||
        outModes.bottom === outMode ||
        outModes.left === outMode ||
        outModes.right === outMode ||
        outModes.top === outMode);
};
class OutOfCanvasUpdater {
    constructor(container) {
        this._updateOutMode = (particle, delta, outMode, direction) => {
            for (const updater of this.updaters) {
                updater.update(particle, direction, delta, outMode);
            }
        };
        this.container = container;
        this.updaters = [];
    }
    init(particle) {
        this.updaters = [];
        const outModes = particle.options.move.outModes;
        if (checkOutMode(outModes, "bounce")) {
            this.updaters.push(new _BounceOutMode_js__WEBPACK_IMPORTED_MODULE_0__.BounceOutMode(this.container));
        }
        else if (checkOutMode(outModes, "out")) {
            this.updaters.push(new _OutOutMode_js__WEBPACK_IMPORTED_MODULE_3__.OutOutMode(this.container));
        }
        else if (checkOutMode(outModes, "destroy")) {
            this.updaters.push(new _DestroyOutMode_js__WEBPACK_IMPORTED_MODULE_1__.DestroyOutMode(this.container));
        }
        else if (checkOutMode(outModes, "none")) {
            this.updaters.push(new _NoneOutMode_js__WEBPACK_IMPORTED_MODULE_2__.NoneOutMode(this.container));
        }
    }
    isEnabled(particle) {
        return !particle.destroyed && !particle.spawning;
    }
    update(particle, delta) {
        const outModes = particle.options.move.outModes;
        this._updateOutMode(particle, delta, outModes.bottom ?? outModes.default, "bottom");
        this._updateOutMode(particle, delta, outModes.left ?? outModes.default, "left");
        this._updateOutMode(particle, delta, outModes.right ?? outModes.default, "right");
        this._updateOutMode(particle, delta, outModes.top ?? outModes.default, "top");
    }
}


/***/ }),

/***/ "./node_modules/@tsparticles/updater-out-modes/browser/OutOutMode.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tsparticles/updater-out-modes/browser/OutOutMode.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OutOutMode: () => (/* binding */ OutOutMode)
/* harmony export */ });
/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ "./node_modules/@tsparticles/engine/browser/index.js");

const minVelocity = 0, minDistance = 0;
class OutOutMode {
    constructor(container) {
        this.container = container;
        this.modes = ["out"];
    }
    update(particle, direction, delta, outMode) {
        if (!this.modes.includes(outMode)) {
            return;
        }
        const container = this.container;
        switch (particle.outType) {
            case "inside": {
                const { x: vx, y: vy } = particle.velocity;
                const circVec = _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.Vector.origin;
                circVec.length = particle.moveCenter.radius;
                circVec.angle = particle.velocity.angle + Math.PI;
                circVec.addTo(_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.Vector.create(particle.moveCenter));
                const { dx, dy } = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getDistances)(particle.position, circVec);
                if ((vx <= minVelocity && dx >= minDistance) ||
                    (vy <= minVelocity && dy >= minDistance) ||
                    (vx >= minVelocity && dx <= minDistance) ||
                    (vy >= minVelocity && dy <= minDistance)) {
                    return;
                }
                particle.position.x = Math.floor((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.randomInRange)({
                    min: 0,
                    max: container.canvas.size.width,
                }));
                particle.position.y = Math.floor((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.randomInRange)({
                    min: 0,
                    max: container.canvas.size.height,
                }));
                const { dx: newDx, dy: newDy } = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getDistances)(particle.position, particle.moveCenter);
                particle.direction = Math.atan2(-newDy, -newDx);
                particle.velocity.angle = particle.direction;
                break;
            }
            default: {
                if ((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.isPointInside)(particle.position, container.canvas.size, _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.Vector.origin, particle.getRadius(), direction)) {
                    return;
                }
                switch (particle.outType) {
                    case "outside": {
                        particle.position.x =
                            Math.floor((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.randomInRange)({
                                min: -particle.moveCenter.radius,
                                max: particle.moveCenter.radius,
                            })) + particle.moveCenter.x;
                        particle.position.y =
                            Math.floor((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.randomInRange)({
                                min: -particle.moveCenter.radius,
                                max: particle.moveCenter.radius,
                            })) + particle.moveCenter.y;
                        const { dx, dy } = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getDistances)(particle.position, particle.moveCenter);
                        if (particle.moveCenter.radius) {
                            particle.direction = Math.atan2(dy, dx);
                            particle.velocity.angle = particle.direction;
                        }
                        break;
                    }
                    case "normal": {
                        const warp = particle.options.move.warp, canvasSize = container.canvas.size, newPos = {
                            bottom: canvasSize.height + particle.getRadius() + particle.offset.y,
                            left: -particle.getRadius() - particle.offset.x,
                            right: canvasSize.width + particle.getRadius() + particle.offset.x,
                            top: -particle.getRadius() - particle.offset.y,
                        }, sizeValue = particle.getRadius(), nextBounds = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.calculateBounds)(particle.position, sizeValue);
                        if (direction === "right" &&
                            nextBounds.left > canvasSize.width + particle.offset.x) {
                            particle.position.x = newPos.left;
                            particle.initialPosition.x = particle.position.x;
                            if (!warp) {
                                particle.position.y = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRandom)() * canvasSize.height;
                                particle.initialPosition.y = particle.position.y;
                            }
                        }
                        else if (direction === "left" && nextBounds.right < -particle.offset.x) {
                            particle.position.x = newPos.right;
                            particle.initialPosition.x = particle.position.x;
                            if (!warp) {
                                particle.position.y = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRandom)() * canvasSize.height;
                                particle.initialPosition.y = particle.position.y;
                            }
                        }
                        if (direction === "bottom" &&
                            nextBounds.top > canvasSize.height + particle.offset.y) {
                            if (!warp) {
                                particle.position.x = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRandom)() * canvasSize.width;
                                particle.initialPosition.x = particle.position.x;
                            }
                            particle.position.y = newPos.top;
                            particle.initialPosition.y = particle.position.y;
                        }
                        else if (direction === "top" && nextBounds.bottom < -particle.offset.y) {
                            if (!warp) {
                                particle.position.x = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRandom)() * canvasSize.width;
                                particle.initialPosition.x = particle.position.x;
                            }
                            particle.position.y = newPos.bottom;
                            particle.initialPosition.y = particle.position.y;
                        }
                        break;
                    }
                }
                break;
            }
        }
    }
}


/***/ }),

/***/ "./node_modules/@tsparticles/updater-out-modes/browser/Utils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tsparticles/updater-out-modes/browser/Utils.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bounceHorizontal: () => (/* binding */ bounceHorizontal),
/* harmony export */   bounceVertical: () => (/* binding */ bounceVertical)
/* harmony export */ });
/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ "./node_modules/@tsparticles/engine/browser/index.js");

const minVelocity = 0, boundsMin = 0;
function bounceHorizontal(data) {
    if ((data.outMode !== "bounce" && data.outMode !== "split") ||
        (data.direction !== "left" && data.direction !== "right")) {
        return;
    }
    if (data.bounds.right < boundsMin && data.direction === "left") {
        data.particle.position.x = data.size + data.offset.x;
    }
    else if (data.bounds.left > data.canvasSize.width && data.direction === "right") {
        data.particle.position.x = data.canvasSize.width - data.size - data.offset.x;
    }
    const velocity = data.particle.velocity.x;
    let bounced = false;
    if ((data.direction === "right" &&
        data.bounds.right >= data.canvasSize.width &&
        velocity > minVelocity) ||
        (data.direction === "left" && data.bounds.left <= boundsMin && velocity < minVelocity)) {
        const newVelocity = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRangeValue)(data.particle.options.bounce.horizontal.value);
        data.particle.velocity.x *= -newVelocity;
        bounced = true;
    }
    if (!bounced) {
        return;
    }
    const minPos = data.offset.x + data.size;
    if (data.bounds.right >= data.canvasSize.width && data.direction === "right") {
        data.particle.position.x = data.canvasSize.width - minPos;
    }
    else if (data.bounds.left <= boundsMin && data.direction === "left") {
        data.particle.position.x = minPos;
    }
    if (data.outMode === "split") {
        data.particle.destroy();
    }
}
function bounceVertical(data) {
    if ((data.outMode !== "bounce" && data.outMode !== "split") ||
        (data.direction !== "bottom" && data.direction !== "top")) {
        return;
    }
    if (data.bounds.bottom < boundsMin && data.direction === "top") {
        data.particle.position.y = data.size + data.offset.y;
    }
    else if (data.bounds.top > data.canvasSize.height && data.direction === "bottom") {
        data.particle.position.y = data.canvasSize.height - data.size - data.offset.y;
    }
    const velocity = data.particle.velocity.y;
    let bounced = false;
    if ((data.direction === "bottom" &&
        data.bounds.bottom >= data.canvasSize.height &&
        velocity > minVelocity) ||
        (data.direction === "top" && data.bounds.top <= boundsMin && velocity < minVelocity)) {
        const newVelocity = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRangeValue)(data.particle.options.bounce.vertical.value);
        data.particle.velocity.y *= -newVelocity;
        bounced = true;
    }
    if (!bounced) {
        return;
    }
    const minPos = data.offset.y + data.size;
    if (data.bounds.bottom >= data.canvasSize.height && data.direction === "bottom") {
        data.particle.position.y = data.canvasSize.height - minPos;
    }
    else if (data.bounds.top <= boundsMin && data.direction === "top") {
        data.particle.position.y = minPos;
    }
    if (data.outMode === "split") {
        data.particle.destroy();
    }
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,