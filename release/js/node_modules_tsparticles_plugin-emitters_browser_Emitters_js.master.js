"use strict";
(self["webpackChunkvshb_local"] = self["webpackChunkvshb_local"] || []).push([["node_modules_tsparticles_plugin-emitters_browser_Emitters_js"],{

/***/ "./node_modules/@tsparticles/plugin-emitters/browser/Emitters.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@tsparticles/plugin-emitters/browser/Emitters.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Emitters: () => (/* binding */ Emitters)
/* harmony export */ });
/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ "./node_modules/@tsparticles/engine/browser/index.js");

class Emitters {
    constructor(engine, container) {
        this.container = container;
        this._engine = engine;
        this.array = [];
        this.emitters = [];
        this.interactivityEmitters = {
            random: {
                count: 1,
                enable: false,
            },
            value: [],
        };
        const defaultIndex = 0;
        container.getEmitter = (idxOrName) => idxOrName === undefined || (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.isNumber)(idxOrName)
            ? this.array[idxOrName ?? defaultIndex]
            : this.array.find((t) => t.name === idxOrName);
        container.addEmitter = async (options, position) => this.addEmitter(options, position);
        container.removeEmitter = (idxOrName) => {
            const emitter = container.getEmitter(idxOrName);
            if (emitter) {
                this.removeEmitter(emitter);
            }
        };
        container.playEmitter = (idxOrName) => {
            const emitter = container.getEmitter(idxOrName);
            if (emitter) {
                emitter.externalPlay();
            }
        };
        container.pauseEmitter = (idxOrName) => {
            const emitter = container.getEmitter(idxOrName);
            if (emitter) {
                emitter.externalPause();
            }
        };
    }
    async addEmitter(options, position) {
        const { Emitter } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./Options/Classes/Emitter.js */ "./node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/Emitter.js")), { EmitterInstance } = await __webpack_require__.e(/*! import() */ "vendors-node_modules_tsparticles_plugin-emitters_browser_EmitterInstance_js").then(__webpack_require__.bind(__webpack_require__, /*! ./EmitterInstance.js */ "./node_modules/@tsparticles/plugin-emitters/browser/EmitterInstance.js")), emitterOptions = new Emitter();
        emitterOptions.load(options);
        const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);
        await emitter.init();
        this.array.push(emitter);
        return emitter;
    }
    handleClickMode(mode) {
        const emitterOptions = this.emitters, modeEmitters = this.interactivityEmitters;
        if (mode !== "emitter") {
            return;
        }
        let emittersModeOptions;
        if (modeEmitters && (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.isArray)(modeEmitters.value)) {
            const minLength = 0;
            if (modeEmitters.value.length > minLength && modeEmitters.random.enable) {
                emittersModeOptions = [];
                const usedIndexes = [];
                for (let i = 0; i < modeEmitters.random.count; i++) {
                    const idx = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.arrayRandomIndex)(modeEmitters.value);
                    if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {
                        i--;
                        continue;
                    }
                    usedIndexes.push(idx);
                    emittersModeOptions.push((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.itemFromArray)(modeEmitters.value, idx));
                }
            }
            else {
                emittersModeOptions = modeEmitters.value;
            }
        }
        else {
            emittersModeOptions = modeEmitters?.value;
        }
        const emittersOptions = emittersModeOptions ?? emitterOptions, ePosition = this.container.interactivity.mouse.clickPosition;
        void (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.executeOnSingleOrMultiple)(emittersOptions, async (emitter) => {
            await this.addEmitter(emitter, ePosition);
        });
    }
    async init() {
        this.emitters = this.container.actualOptions.emitters;
        this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;
        if (!this.emitters) {
            return;
        }
        if ((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.isArray)(this.emitters)) {
            for (const emitterOptions of this.emitters) {
                await this.addEmitter(emitterOptions);
            }
        }
        else {
            await this.addEmitter(this.emitters);
        }
    }
    pause() {
        for (const emitter of this.array) {
            emitter.pause();
        }
    }
    play() {
        for (const emitter of this.array) {
            emitter.play();
        }
    }
    removeEmitter(emitter) {
        const index = this.array.indexOf(emitter), minIndex = 0, deleteCount = 1;
        if (index >= minIndex) {
            this.array.splice(index, deleteCount);
        }
    }
    resize() {
        for (const emitter of this.array) {
            emitter.resize();
        }
    }
    stop() {
        this.array = [];
    }
    update(delta) {
        for (const emitter of this.array) {
            emitter.update(delta);
        }
    }
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX3RzcGFydGljbGVzX3BsdWdpbi1lbWl0dGVyc19icm93c2VyX0VtaXR0ZXJzX2pzLm1hc3Rlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFxSDtBQUM5RztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsNkRBQVE7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixVQUFVLFFBQVEsME1BQXNDLElBQUksa0JBQWtCLFFBQVEsOFFBQThCO0FBQ3BJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw0REFBTztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQywrQkFBK0I7QUFDL0QsZ0NBQWdDLHFFQUFnQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLGtFQUFhO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSw4RUFBeUI7QUFDdEM7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDREQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92c2hiLmxvY2FsLy4vbm9kZV9tb2R1bGVzL0B0c3BhcnRpY2xlcy9wbHVnaW4tZW1pdHRlcnMvYnJvd3Nlci9FbWl0dGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcnJheVJhbmRvbUluZGV4LCBleGVjdXRlT25TaW5nbGVPck11bHRpcGxlLCBpc0FycmF5LCBpc051bWJlciwgaXRlbUZyb21BcnJheSwgfSBmcm9tIFwiQHRzcGFydGljbGVzL2VuZ2luZVwiO1xuZXhwb3J0IGNsYXNzIEVtaXR0ZXJzIHtcbiAgICBjb25zdHJ1Y3RvcihlbmdpbmUsIGNvbnRhaW5lcikge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5fZW5naW5lID0gZW5naW5lO1xuICAgICAgICB0aGlzLmFycmF5ID0gW107XG4gICAgICAgIHRoaXMuZW1pdHRlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5pbnRlcmFjdGl2aXR5RW1pdHRlcnMgPSB7XG4gICAgICAgICAgICByYW5kb206IHtcbiAgICAgICAgICAgICAgICBjb3VudDogMSxcbiAgICAgICAgICAgICAgICBlbmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZhbHVlOiBbXSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZGVmYXVsdEluZGV4ID0gMDtcbiAgICAgICAgY29udGFpbmVyLmdldEVtaXR0ZXIgPSAoaWR4T3JOYW1lKSA9PiBpZHhPck5hbWUgPT09IHVuZGVmaW5lZCB8fCBpc051bWJlcihpZHhPck5hbWUpXG4gICAgICAgICAgICA/IHRoaXMuYXJyYXlbaWR4T3JOYW1lID8/IGRlZmF1bHRJbmRleF1cbiAgICAgICAgICAgIDogdGhpcy5hcnJheS5maW5kKCh0KSA9PiB0Lm5hbWUgPT09IGlkeE9yTmFtZSk7XG4gICAgICAgIGNvbnRhaW5lci5hZGRFbWl0dGVyID0gYXN5bmMgKG9wdGlvbnMsIHBvc2l0aW9uKSA9PiB0aGlzLmFkZEVtaXR0ZXIob3B0aW9ucywgcG9zaXRpb24pO1xuICAgICAgICBjb250YWluZXIucmVtb3ZlRW1pdHRlciA9IChpZHhPck5hbWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVtaXR0ZXIgPSBjb250YWluZXIuZ2V0RW1pdHRlcihpZHhPck5hbWUpO1xuICAgICAgICAgICAgaWYgKGVtaXR0ZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUVtaXR0ZXIoZW1pdHRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnRhaW5lci5wbGF5RW1pdHRlciA9IChpZHhPck5hbWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVtaXR0ZXIgPSBjb250YWluZXIuZ2V0RW1pdHRlcihpZHhPck5hbWUpO1xuICAgICAgICAgICAgaWYgKGVtaXR0ZXIpIHtcbiAgICAgICAgICAgICAgICBlbWl0dGVyLmV4dGVybmFsUGxheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb250YWluZXIucGF1c2VFbWl0dGVyID0gKGlkeE9yTmFtZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZW1pdHRlciA9IGNvbnRhaW5lci5nZXRFbWl0dGVyKGlkeE9yTmFtZSk7XG4gICAgICAgICAgICBpZiAoZW1pdHRlcikge1xuICAgICAgICAgICAgICAgIGVtaXR0ZXIuZXh0ZXJuYWxQYXVzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBhc3luYyBhZGRFbWl0dGVyKG9wdGlvbnMsIHBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IHsgRW1pdHRlciB9ID0gYXdhaXQgaW1wb3J0KFwiLi9PcHRpb25zL0NsYXNzZXMvRW1pdHRlci5qc1wiKSwgeyBFbWl0dGVySW5zdGFuY2UgfSA9IGF3YWl0IGltcG9ydChcIi4vRW1pdHRlckluc3RhbmNlLmpzXCIpLCBlbWl0dGVyT3B0aW9ucyA9IG5ldyBFbWl0dGVyKCk7XG4gICAgICAgIGVtaXR0ZXJPcHRpb25zLmxvYWQob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGVtaXR0ZXIgPSBuZXcgRW1pdHRlckluc3RhbmNlKHRoaXMuX2VuZ2luZSwgdGhpcywgdGhpcy5jb250YWluZXIsIGVtaXR0ZXJPcHRpb25zLCBwb3NpdGlvbik7XG4gICAgICAgIGF3YWl0IGVtaXR0ZXIuaW5pdCgpO1xuICAgICAgICB0aGlzLmFycmF5LnB1c2goZW1pdHRlcik7XG4gICAgICAgIHJldHVybiBlbWl0dGVyO1xuICAgIH1cbiAgICBoYW5kbGVDbGlja01vZGUobW9kZSkge1xuICAgICAgICBjb25zdCBlbWl0dGVyT3B0aW9ucyA9IHRoaXMuZW1pdHRlcnMsIG1vZGVFbWl0dGVycyA9IHRoaXMuaW50ZXJhY3Rpdml0eUVtaXR0ZXJzO1xuICAgICAgICBpZiAobW9kZSAhPT0gXCJlbWl0dGVyXCIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZW1pdHRlcnNNb2RlT3B0aW9ucztcbiAgICAgICAgaWYgKG1vZGVFbWl0dGVycyAmJiBpc0FycmF5KG1vZGVFbWl0dGVycy52YWx1ZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IG1pbkxlbmd0aCA9IDA7XG4gICAgICAgICAgICBpZiAobW9kZUVtaXR0ZXJzLnZhbHVlLmxlbmd0aCA+IG1pbkxlbmd0aCAmJiBtb2RlRW1pdHRlcnMucmFuZG9tLmVuYWJsZSkge1xuICAgICAgICAgICAgICAgIGVtaXR0ZXJzTW9kZU9wdGlvbnMgPSBbXTtcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VkSW5kZXhlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW9kZUVtaXR0ZXJzLnJhbmRvbS5jb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkeCA9IGFycmF5UmFuZG9tSW5kZXgobW9kZUVtaXR0ZXJzLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVzZWRJbmRleGVzLmluY2x1ZGVzKGlkeCkgJiYgdXNlZEluZGV4ZXMubGVuZ3RoIDwgbW9kZUVtaXR0ZXJzLnZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdXNlZEluZGV4ZXMucHVzaChpZHgpO1xuICAgICAgICAgICAgICAgICAgICBlbWl0dGVyc01vZGVPcHRpb25zLnB1c2goaXRlbUZyb21BcnJheShtb2RlRW1pdHRlcnMudmFsdWUsIGlkeCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVtaXR0ZXJzTW9kZU9wdGlvbnMgPSBtb2RlRW1pdHRlcnMudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbWl0dGVyc01vZGVPcHRpb25zID0gbW9kZUVtaXR0ZXJzPy52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbWl0dGVyc09wdGlvbnMgPSBlbWl0dGVyc01vZGVPcHRpb25zID8/IGVtaXR0ZXJPcHRpb25zLCBlUG9zaXRpb24gPSB0aGlzLmNvbnRhaW5lci5pbnRlcmFjdGl2aXR5Lm1vdXNlLmNsaWNrUG9zaXRpb247XG4gICAgICAgIHZvaWQgZXhlY3V0ZU9uU2luZ2xlT3JNdWx0aXBsZShlbWl0dGVyc09wdGlvbnMsIGFzeW5jIChlbWl0dGVyKSA9PiB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFkZEVtaXR0ZXIoZW1pdHRlciwgZVBvc2l0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIGluaXQoKSB7XG4gICAgICAgIHRoaXMuZW1pdHRlcnMgPSB0aGlzLmNvbnRhaW5lci5hY3R1YWxPcHRpb25zLmVtaXR0ZXJzO1xuICAgICAgICB0aGlzLmludGVyYWN0aXZpdHlFbWl0dGVycyA9IHRoaXMuY29udGFpbmVyLmFjdHVhbE9wdGlvbnMuaW50ZXJhY3Rpdml0eS5tb2Rlcy5lbWl0dGVycztcbiAgICAgICAgaWYgKCF0aGlzLmVtaXR0ZXJzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXkodGhpcy5lbWl0dGVycykpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZW1pdHRlck9wdGlvbnMgb2YgdGhpcy5lbWl0dGVycykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkRW1pdHRlcihlbWl0dGVyT3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFkZEVtaXR0ZXIodGhpcy5lbWl0dGVycyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGF1c2UoKSB7XG4gICAgICAgIGZvciAoY29uc3QgZW1pdHRlciBvZiB0aGlzLmFycmF5KSB7XG4gICAgICAgICAgICBlbWl0dGVyLnBhdXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGxheSgpIHtcbiAgICAgICAgZm9yIChjb25zdCBlbWl0dGVyIG9mIHRoaXMuYXJyYXkpIHtcbiAgICAgICAgICAgIGVtaXR0ZXIucGxheSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZUVtaXR0ZXIoZW1pdHRlcikge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuYXJyYXkuaW5kZXhPZihlbWl0dGVyKSwgbWluSW5kZXggPSAwLCBkZWxldGVDb3VudCA9IDE7XG4gICAgICAgIGlmIChpbmRleCA+PSBtaW5JbmRleCkge1xuICAgICAgICAgICAgdGhpcy5hcnJheS5zcGxpY2UoaW5kZXgsIGRlbGV0ZUNvdW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXNpemUoKSB7XG4gICAgICAgIGZvciAoY29uc3QgZW1pdHRlciBvZiB0aGlzLmFycmF5KSB7XG4gICAgICAgICAgICBlbWl0dGVyLnJlc2l6ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIHRoaXMuYXJyYXkgPSBbXTtcbiAgICB9XG4gICAgdXBkYXRlKGRlbHRhKSB7XG4gICAgICAgIGZvciAoY29uc3QgZW1pdHRlciBvZiB0aGlzLmFycmF5KSB7XG4gICAgICAgICAgICBlbWl0dGVyLnVwZGF0ZShkZWx0YSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=