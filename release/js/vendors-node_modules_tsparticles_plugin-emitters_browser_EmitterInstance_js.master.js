"use strict";
(self["webpackChunkvshb_local"] = self["webpackChunkvshb_local"] || []).push([["vendors-node_modules_tsparticles_plugin-emitters_browser_EmitterInstance_js"],{

/***/ "./node_modules/@tsparticles/plugin-emitters/browser/EmitterInstance.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tsparticles/plugin-emitters/browser/EmitterInstance.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EmitterInstance: () => (/* binding */ EmitterInstance)
/* harmony export */ });
/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ "./node_modules/@tsparticles/engine/browser/index.js");
/* harmony import */ var _Options_Classes_Emitter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Options/Classes/Emitter.js */ "./node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/Emitter.js");
/* harmony import */ var _Options_Classes_EmitterSize_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Options/Classes/EmitterSize.js */ "./node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterSize.js");



const half = 0.5, defaultLifeDelay = 0, minLifeCount = 0, defaultSpawnDelay = 0, defaultEmitDelay = 0, defaultLifeCount = -1, defaultColorAnimationFactor = 1;
function setParticlesOptionsColor(particlesOptions, color) {
    if (particlesOptions.color) {
        particlesOptions.color.value = color;
    }
    else {
        particlesOptions.color = {
            value: color,
        };
    }
}
class EmitterInstance {
    constructor(engine, emitters, container, options, position) {
        this.emitters = emitters;
        this.container = container;
        this._destroy = () => {
            this._mutationObserver?.disconnect();
            this._mutationObserver = undefined;
            this._resizeObserver?.disconnect();
            this._resizeObserver = undefined;
            this.emitters.removeEmitter(this);
            this._engine.dispatchEvent("emitterDestroyed", {
                container: this.container,
                data: {
                    emitter: this,
                },
            });
        };
        this._prepareToDie = () => {
            if (this._paused) {
                return;
            }
            const duration = this.options.life?.duration !== undefined ? (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRangeValue)(this.options.life.duration) : undefined, minDuration = 0, minLifeCount = 0;
            if (this.container.retina.reduceFactor &&
                (this._lifeCount > minLifeCount || this._immortal) &&
                duration !== undefined &&
                duration > minDuration) {
                this._duration = duration * _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.millisecondsToSeconds;
            }
        };
        this._setColorAnimation = (animation, initValue, maxValue, factor = defaultColorAnimationFactor) => {
            const container = this.container;
            if (!animation.enable) {
                return initValue;
            }
            const colorOffset = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.randomInRange)(animation.offset), delay = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRangeValue)(this.options.rate.delay), emitFactor = (delay * _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.millisecondsToSeconds) / container.retina.reduceFactor, defaultColorSpeed = 0, colorSpeed = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRangeValue)(animation.speed ?? defaultColorSpeed);
            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * factor) % maxValue;
        };
        this._engine = engine;
        this._currentDuration = 0;
        this._currentEmitDelay = 0;
        this._currentSpawnDelay = 0;
        this._initialPosition = position;
        if (options instanceof _Options_Classes_Emitter_js__WEBPACK_IMPORTED_MODULE_1__.Emitter) {
            this.options = options;
        }
        else {
            this.options = new _Options_Classes_Emitter_js__WEBPACK_IMPORTED_MODULE_1__.Emitter();
            this.options.load(options);
        }
        this._spawnDelay =
            ((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRangeValue)(this.options.life.delay ?? defaultLifeDelay) * _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.millisecondsToSeconds) /
                this.container.retina.reduceFactor;
        this.position = this._initialPosition ?? this._calcPosition();
        this.name = this.options.name;
        this.fill = this.options.fill;
        this._firstSpawn = !this.options.life.wait;
        this._startParticlesAdded = false;
        let particlesOptions = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.deepExtend)({}, this.options.particles);
        particlesOptions ??= {};
        particlesOptions.move ??= {};
        particlesOptions.move.direction ??= this.options.direction;
        if (this.options.spawnColor) {
            this.spawnColor = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.rangeColorToHsl)(this.options.spawnColor);
        }
        this._paused = !this.options.autoPlay;
        this._particlesOptions = particlesOptions;
        this._size = this._calcSize();
        this.size = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getSize)(this._size, this.container.canvas.size);
        this._lifeCount = this.options.life.count ?? defaultLifeCount;
        this._immortal = this._lifeCount <= minLifeCount;
        if (this.options.domId) {
            const element = document.getElementById(this.options.domId);
            if (element) {
                this._mutationObserver = new MutationObserver(() => {
                    this.resize();
                });
                this._resizeObserver = new ResizeObserver(() => {
                    this.resize();
                });
                this._mutationObserver.observe(element, {
                    attributes: true,
                    attributeFilter: ["style", "width", "height"],
                });
                this._resizeObserver.observe(element);
            }
        }
        const shapeOptions = this.options.shape, shapeGenerator = this._engine.emitterShapeManager?.getShapeGenerator(shapeOptions.type);
        if (shapeGenerator) {
            this._shape = shapeGenerator.generate(this.position, this.size, this.fill, shapeOptions.options);
        }
        this._engine.dispatchEvent("emitterCreated", {
            container,
            data: {
                emitter: this,
            },
        });
        this.play();
    }
    externalPause() {
        this._paused = true;
        this.pause();
    }
    externalPlay() {
        this._paused = false;
        this.play();
    }
    async init() {
        await this._shape?.init();
    }
    pause() {
        if (this._paused) {
            return;
        }
        delete this._emitDelay;
    }
    play() {
        if (this._paused) {
            return;
        }
        if (!(this.container.retina.reduceFactor &&
            (this._lifeCount > minLifeCount || this._immortal || !this.options.life.count) &&
            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? defaultSpawnDelay)))) {
            return;
        }
        if (this._emitDelay === undefined) {
            const delay = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRangeValue)(this.options.rate.delay);
            this._emitDelay = (delay * _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.millisecondsToSeconds) / this.container.retina.reduceFactor;
        }
        if (this._lifeCount > minLifeCount || this._immortal) {
            this._prepareToDie();
        }
    }
    resize() {
        const initialPosition = this._initialPosition;
        this.position =
            initialPosition && (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.isPointInside)(initialPosition, this.container.canvas.size, _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.Vector.origin)
                ? initialPosition
                : this._calcPosition();
        this._size = this._calcSize();
        this.size = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getSize)(this._size, this.container.canvas.size);
        this._shape?.resize(this.position, this.size);
    }
    update(delta) {
        if (this._paused) {
            return;
        }
        if (this._firstSpawn) {
            this._firstSpawn = false;
            this._currentSpawnDelay = this._spawnDelay ?? defaultSpawnDelay;
            this._currentEmitDelay = this._emitDelay ?? defaultEmitDelay;
        }
        if (!this._startParticlesAdded) {
            this._startParticlesAdded = true;
            this._emitParticles(this.options.startCount);
        }
        if (this._duration !== undefined) {
            this._currentDuration += delta.value;
            if (this._currentDuration >= this._duration) {
                this.pause();
                if (this._spawnDelay !== undefined) {
                    delete this._spawnDelay;
                }
                if (!this._immortal) {
                    this._lifeCount--;
                }
                if (this._lifeCount > minLifeCount || this._immortal) {
                    this.position = this._calcPosition();
                    this._shape?.resize(this.position, this.size);
                    this._spawnDelay =
                        ((0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRangeValue)(this.options.life.delay ?? defaultLifeDelay) * _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.millisecondsToSeconds) /
                            this.container.retina.reduceFactor;
                }
                else {
                    this._destroy();
                }
                this._currentDuration -= this._duration;
                delete this._duration;
            }
        }
        if (this._spawnDelay !== undefined) {
            this._currentSpawnDelay += delta.value;
            if (this._currentSpawnDelay >= this._spawnDelay) {
                this._engine.dispatchEvent("emitterPlay", {
                    container: this.container,
                });
                this.play();
                this._currentSpawnDelay -= this._currentSpawnDelay;
                delete this._spawnDelay;
            }
        }
        if (this._emitDelay !== undefined) {
            this._currentEmitDelay += delta.value;
            if (this._currentEmitDelay >= this._emitDelay) {
                this._emit();
                this._currentEmitDelay -= this._emitDelay;
            }
        }
    }
    _calcPosition() {
        if (this.options.domId) {
            const element = document.getElementById(this.options.domId);
            if (element) {
                const elRect = element.getBoundingClientRect(), pxRatio = this.container.retina.pixelRatio;
                return {
                    x: (elRect.x + elRect.width * half) * pxRatio,
                    y: (elRect.y + elRect.height * half) * pxRatio,
                };
            }
        }
        return (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.calcPositionOrRandomFromSizeRanged)({
            size: this.container.canvas.size,
            position: this.options.position,
        });
    }
    _calcSize() {
        const container = this.container;
        if (this.options.domId) {
            const element = document.getElementById(this.options.domId);
            if (element) {
                const elRect = element.getBoundingClientRect();
                return {
                    width: elRect.width * container.retina.pixelRatio,
                    height: elRect.height * container.retina.pixelRatio,
                    mode: "precise",
                };
            }
        }
        return (this.options.size ??
            (() => {
                const size = new _Options_Classes_EmitterSize_js__WEBPACK_IMPORTED_MODULE_2__.EmitterSize();
                size.load({
                    height: 0,
                    mode: "percent",
                    width: 0,
                });
                return size;
            })());
    }
    _emit() {
        if (this._paused) {
            return;
        }
        const quantity = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getRangeValue)(this.options.rate.quantity);
        this._emitParticles(quantity);
    }
    _emitParticles(quantity) {
        const singleParticlesOptions = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.itemFromSingleOrMultiple)(this._particlesOptions);
        for (let i = 0; i < quantity; i++) {
            const particlesOptions = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.deepExtend)({}, singleParticlesOptions);
            if (this.spawnColor) {
                const hslAnimation = this.options.spawnColor?.animation;
                if (hslAnimation) {
                    const maxValues = {
                        h: 360,
                        s: 100,
                        l: 100,
                    }, colorFactor = 3.6;
                    this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, maxValues.h, colorFactor);
                    this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, maxValues.s);
                    this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, maxValues.l);
                }
                setParticlesOptionsColor(particlesOptions, this.spawnColor);
            }
            const shapeOptions = this.options.shape;
            let position = this.position;
            if (this._shape) {
                const shapePosData = this._shape.randomPosition();
                if (shapePosData) {
                    position = shapePosData.position;
                    const replaceData = shapeOptions.replace;
                    if (replaceData.color && shapePosData.color) {
                        setParticlesOptionsColor(particlesOptions, shapePosData.color);
                    }
                    if (replaceData.opacity) {
                        if (particlesOptions.opacity) {
                            particlesOptions.opacity.value = shapePosData.opacity;
                        }
                        else {
                            particlesOptions.opacity = {
                                value: shapePosData.opacity,
                            };
                        }
                    }
                }
                else {
                    position = null;
                }
            }
            if (position) {
                this.container.particles.addParticle(position, particlesOptions);
            }
        }
    }
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfdHNwYXJ0aWNsZXNfcGx1Z2luLWVtaXR0ZXJzX2Jyb3dzZXJfRW1pdHRlckluc3RhbmNlX2pzLm1hc3Rlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQXNOO0FBQy9KO0FBQ1E7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsa0VBQWE7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsc0VBQXFCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGtFQUFhLDRCQUE0QixrRUFBYSxpREFBaUQsc0VBQXFCLHVFQUF1RSxrRUFBYTtBQUNoUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixnRUFBTztBQUN0QztBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsZ0VBQU87QUFDdEM7QUFDQTtBQUNBO0FBQ0EsYUFBYSxrRUFBYSxnREFBZ0Qsc0VBQXFCO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiwrREFBVSxHQUFHO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLG9FQUFlO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDREQUFPO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsa0VBQWE7QUFDdkMsdUNBQXVDLHNFQUFxQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGtFQUFhLDhDQUE4Qyx1REFBTTtBQUNoRztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsNERBQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixrRUFBYSxnREFBZ0Qsc0VBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx1RkFBa0M7QUFDakQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyx3RUFBVztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGtFQUFhO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qyw2RUFBd0I7QUFDL0Qsd0JBQXdCLGNBQWM7QUFDdEMscUNBQXFDLCtEQUFVLEdBQUc7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92c2hiLmxvY2FsLy4vbm9kZV9tb2R1bGVzL0B0c3BhcnRpY2xlcy9wbHVnaW4tZW1pdHRlcnMvYnJvd3Nlci9FbWl0dGVySW5zdGFuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmVjdG9yLCBjYWxjUG9zaXRpb25PclJhbmRvbUZyb21TaXplUmFuZ2VkLCBkZWVwRXh0ZW5kLCBnZXRSYW5nZVZhbHVlLCBnZXRTaXplLCBpc1BvaW50SW5zaWRlLCBpdGVtRnJvbVNpbmdsZU9yTXVsdGlwbGUsIG1pbGxpc2Vjb25kc1RvU2Vjb25kcywgcmFuZG9tSW5SYW5nZSwgcmFuZ2VDb2xvclRvSHNsLCB9IGZyb20gXCJAdHNwYXJ0aWNsZXMvZW5naW5lXCI7XG5pbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSBcIi4vT3B0aW9ucy9DbGFzc2VzL0VtaXR0ZXIuanNcIjtcbmltcG9ydCB7IEVtaXR0ZXJTaXplIH0gZnJvbSBcIi4vT3B0aW9ucy9DbGFzc2VzL0VtaXR0ZXJTaXplLmpzXCI7XG5jb25zdCBoYWxmID0gMC41LCBkZWZhdWx0TGlmZURlbGF5ID0gMCwgbWluTGlmZUNvdW50ID0gMCwgZGVmYXVsdFNwYXduRGVsYXkgPSAwLCBkZWZhdWx0RW1pdERlbGF5ID0gMCwgZGVmYXVsdExpZmVDb3VudCA9IC0xLCBkZWZhdWx0Q29sb3JBbmltYXRpb25GYWN0b3IgPSAxO1xuZnVuY3Rpb24gc2V0UGFydGljbGVzT3B0aW9uc0NvbG9yKHBhcnRpY2xlc09wdGlvbnMsIGNvbG9yKSB7XG4gICAgaWYgKHBhcnRpY2xlc09wdGlvbnMuY29sb3IpIHtcbiAgICAgICAgcGFydGljbGVzT3B0aW9ucy5jb2xvci52YWx1ZSA9IGNvbG9yO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcGFydGljbGVzT3B0aW9ucy5jb2xvciA9IHtcbiAgICAgICAgICAgIHZhbHVlOiBjb2xvcixcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRW1pdHRlckluc3RhbmNlIHtcbiAgICBjb25zdHJ1Y3RvcihlbmdpbmUsIGVtaXR0ZXJzLCBjb250YWluZXIsIG9wdGlvbnMsIHBvc2l0aW9uKSB7XG4gICAgICAgIHRoaXMuZW1pdHRlcnMgPSBlbWl0dGVycztcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3kgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9tdXRhdGlvbk9ic2VydmVyPy5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB0aGlzLl9tdXRhdGlvbk9ic2VydmVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5fcmVzaXplT2JzZXJ2ZXI/LmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZU9ic2VydmVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVycy5yZW1vdmVFbWl0dGVyKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5fZW5naW5lLmRpc3BhdGNoRXZlbnQoXCJlbWl0dGVyRGVzdHJveWVkXCIsIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXI6IHRoaXMuY29udGFpbmVyLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgZW1pdHRlcjogdGhpcyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3ByZXBhcmVUb0RpZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9wYXVzZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkdXJhdGlvbiA9IHRoaXMub3B0aW9ucy5saWZlPy5kdXJhdGlvbiAhPT0gdW5kZWZpbmVkID8gZ2V0UmFuZ2VWYWx1ZSh0aGlzLm9wdGlvbnMubGlmZS5kdXJhdGlvbikgOiB1bmRlZmluZWQsIG1pbkR1cmF0aW9uID0gMCwgbWluTGlmZUNvdW50ID0gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRhaW5lci5yZXRpbmEucmVkdWNlRmFjdG9yICYmXG4gICAgICAgICAgICAgICAgKHRoaXMuX2xpZmVDb3VudCA+IG1pbkxpZmVDb3VudCB8fCB0aGlzLl9pbW1vcnRhbCkgJiZcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPiBtaW5EdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2R1cmF0aW9uID0gZHVyYXRpb24gKiBtaWxsaXNlY29uZHNUb1NlY29uZHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3NldENvbG9yQW5pbWF0aW9uID0gKGFuaW1hdGlvbiwgaW5pdFZhbHVlLCBtYXhWYWx1ZSwgZmFjdG9yID0gZGVmYXVsdENvbG9yQW5pbWF0aW9uRmFjdG9yKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgICAgIGlmICghYW5pbWF0aW9uLmVuYWJsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbml0VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb2xvck9mZnNldCA9IHJhbmRvbUluUmFuZ2UoYW5pbWF0aW9uLm9mZnNldCksIGRlbGF5ID0gZ2V0UmFuZ2VWYWx1ZSh0aGlzLm9wdGlvbnMucmF0ZS5kZWxheSksIGVtaXRGYWN0b3IgPSAoZGVsYXkgKiBtaWxsaXNlY29uZHNUb1NlY29uZHMpIC8gY29udGFpbmVyLnJldGluYS5yZWR1Y2VGYWN0b3IsIGRlZmF1bHRDb2xvclNwZWVkID0gMCwgY29sb3JTcGVlZCA9IGdldFJhbmdlVmFsdWUoYW5pbWF0aW9uLnNwZWVkID8/IGRlZmF1bHRDb2xvclNwZWVkKTtcbiAgICAgICAgICAgIHJldHVybiAoaW5pdFZhbHVlICsgKGNvbG9yU3BlZWQgKiBjb250YWluZXIuZnBzTGltaXQpIC8gZW1pdEZhY3RvciArIGNvbG9yT2Zmc2V0ICogZmFjdG9yKSAlIG1heFZhbHVlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9lbmdpbmUgPSBlbmdpbmU7XG4gICAgICAgIHRoaXMuX2N1cnJlbnREdXJhdGlvbiA9IDA7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRFbWl0RGVsYXkgPSAwO1xuICAgICAgICB0aGlzLl9jdXJyZW50U3Bhd25EZWxheSA9IDA7XG4gICAgICAgIHRoaXMuX2luaXRpYWxQb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgICAgICBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIEVtaXR0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmxvYWQob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3Bhd25EZWxheSA9XG4gICAgICAgICAgICAoZ2V0UmFuZ2VWYWx1ZSh0aGlzLm9wdGlvbnMubGlmZS5kZWxheSA/PyBkZWZhdWx0TGlmZURlbGF5KSAqIG1pbGxpc2Vjb25kc1RvU2Vjb25kcykgL1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnJldGluYS5yZWR1Y2VGYWN0b3I7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLl9pbml0aWFsUG9zaXRpb24gPz8gdGhpcy5fY2FsY1Bvc2l0aW9uKCk7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMub3B0aW9ucy5uYW1lO1xuICAgICAgICB0aGlzLmZpbGwgPSB0aGlzLm9wdGlvbnMuZmlsbDtcbiAgICAgICAgdGhpcy5fZmlyc3RTcGF3biA9ICF0aGlzLm9wdGlvbnMubGlmZS53YWl0O1xuICAgICAgICB0aGlzLl9zdGFydFBhcnRpY2xlc0FkZGVkID0gZmFsc2U7XG4gICAgICAgIGxldCBwYXJ0aWNsZXNPcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLnBhcnRpY2xlcyk7XG4gICAgICAgIHBhcnRpY2xlc09wdGlvbnMgPz89IHt9O1xuICAgICAgICBwYXJ0aWNsZXNPcHRpb25zLm1vdmUgPz89IHt9O1xuICAgICAgICBwYXJ0aWNsZXNPcHRpb25zLm1vdmUuZGlyZWN0aW9uID8/PSB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNwYXduQ29sb3IpIHtcbiAgICAgICAgICAgIHRoaXMuc3Bhd25Db2xvciA9IHJhbmdlQ29sb3JUb0hzbCh0aGlzLm9wdGlvbnMuc3Bhd25Db2xvcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcGF1c2VkID0gIXRoaXMub3B0aW9ucy5hdXRvUGxheTtcbiAgICAgICAgdGhpcy5fcGFydGljbGVzT3B0aW9ucyA9IHBhcnRpY2xlc09wdGlvbnM7XG4gICAgICAgIHRoaXMuX3NpemUgPSB0aGlzLl9jYWxjU2l6ZSgpO1xuICAgICAgICB0aGlzLnNpemUgPSBnZXRTaXplKHRoaXMuX3NpemUsIHRoaXMuY29udGFpbmVyLmNhbnZhcy5zaXplKTtcbiAgICAgICAgdGhpcy5fbGlmZUNvdW50ID0gdGhpcy5vcHRpb25zLmxpZmUuY291bnQgPz8gZGVmYXVsdExpZmVDb3VudDtcbiAgICAgICAgdGhpcy5faW1tb3J0YWwgPSB0aGlzLl9saWZlQ291bnQgPD0gbWluTGlmZUNvdW50O1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRvbUlkKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5vcHRpb25zLmRvbUlkKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbXV0YXRpb25PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNpemUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbXV0YXRpb25PYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlRmlsdGVyOiBbXCJzdHlsZVwiLCBcIndpZHRoXCIsIFwiaGVpZ2h0XCJdLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZU9ic2VydmVyLm9ic2VydmUoZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2hhcGVPcHRpb25zID0gdGhpcy5vcHRpb25zLnNoYXBlLCBzaGFwZUdlbmVyYXRvciA9IHRoaXMuX2VuZ2luZS5lbWl0dGVyU2hhcGVNYW5hZ2VyPy5nZXRTaGFwZUdlbmVyYXRvcihzaGFwZU9wdGlvbnMudHlwZSk7XG4gICAgICAgIGlmIChzaGFwZUdlbmVyYXRvcikge1xuICAgICAgICAgICAgdGhpcy5fc2hhcGUgPSBzaGFwZUdlbmVyYXRvci5nZW5lcmF0ZSh0aGlzLnBvc2l0aW9uLCB0aGlzLnNpemUsIHRoaXMuZmlsbCwgc2hhcGVPcHRpb25zLm9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2VuZ2luZS5kaXNwYXRjaEV2ZW50KFwiZW1pdHRlckNyZWF0ZWRcIiwge1xuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGVtaXR0ZXI6IHRoaXMsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5wbGF5KCk7XG4gICAgfVxuICAgIGV4dGVybmFsUGF1c2UoKSB7XG4gICAgICAgIHRoaXMuX3BhdXNlZCA9IHRydWU7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICB9XG4gICAgZXh0ZXJuYWxQbGF5KCkge1xuICAgICAgICB0aGlzLl9wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wbGF5KCk7XG4gICAgfVxuICAgIGFzeW5jIGluaXQoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuX3NoYXBlPy5pbml0KCk7XG4gICAgfVxuICAgIHBhdXNlKCkge1xuICAgICAgICBpZiAodGhpcy5fcGF1c2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHRoaXMuX2VtaXREZWxheTtcbiAgICB9XG4gICAgcGxheSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3BhdXNlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKHRoaXMuY29udGFpbmVyLnJldGluYS5yZWR1Y2VGYWN0b3IgJiZcbiAgICAgICAgICAgICh0aGlzLl9saWZlQ291bnQgPiBtaW5MaWZlQ291bnQgfHwgdGhpcy5faW1tb3J0YWwgfHwgIXRoaXMub3B0aW9ucy5saWZlLmNvdW50KSAmJlxuICAgICAgICAgICAgKHRoaXMuX2ZpcnN0U3Bhd24gfHwgdGhpcy5fY3VycmVudFNwYXduRGVsYXkgPj0gKHRoaXMuX3NwYXduRGVsYXkgPz8gZGVmYXVsdFNwYXduRGVsYXkpKSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fZW1pdERlbGF5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlbGF5ID0gZ2V0UmFuZ2VWYWx1ZSh0aGlzLm9wdGlvbnMucmF0ZS5kZWxheSk7XG4gICAgICAgICAgICB0aGlzLl9lbWl0RGVsYXkgPSAoZGVsYXkgKiBtaWxsaXNlY29uZHNUb1NlY29uZHMpIC8gdGhpcy5jb250YWluZXIucmV0aW5hLnJlZHVjZUZhY3RvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fbGlmZUNvdW50ID4gbWluTGlmZUNvdW50IHx8IHRoaXMuX2ltbW9ydGFsKSB7XG4gICAgICAgICAgICB0aGlzLl9wcmVwYXJlVG9EaWUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXNpemUoKSB7XG4gICAgICAgIGNvbnN0IGluaXRpYWxQb3NpdGlvbiA9IHRoaXMuX2luaXRpYWxQb3NpdGlvbjtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9XG4gICAgICAgICAgICBpbml0aWFsUG9zaXRpb24gJiYgaXNQb2ludEluc2lkZShpbml0aWFsUG9zaXRpb24sIHRoaXMuY29udGFpbmVyLmNhbnZhcy5zaXplLCBWZWN0b3Iub3JpZ2luKVxuICAgICAgICAgICAgICAgID8gaW5pdGlhbFBvc2l0aW9uXG4gICAgICAgICAgICAgICAgOiB0aGlzLl9jYWxjUG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IHRoaXMuX2NhbGNTaXplKCk7XG4gICAgICAgIHRoaXMuc2l6ZSA9IGdldFNpemUodGhpcy5fc2l6ZSwgdGhpcy5jb250YWluZXIuY2FudmFzLnNpemUpO1xuICAgICAgICB0aGlzLl9zaGFwZT8ucmVzaXplKHRoaXMucG9zaXRpb24sIHRoaXMuc2l6ZSk7XG4gICAgfVxuICAgIHVwZGF0ZShkZWx0YSkge1xuICAgICAgICBpZiAodGhpcy5fcGF1c2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2ZpcnN0U3Bhd24pIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpcnN0U3Bhd24gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRTcGF3bkRlbGF5ID0gdGhpcy5fc3Bhd25EZWxheSA/PyBkZWZhdWx0U3Bhd25EZWxheTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRFbWl0RGVsYXkgPSB0aGlzLl9lbWl0RGVsYXkgPz8gZGVmYXVsdEVtaXREZWxheTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3N0YXJ0UGFydGljbGVzQWRkZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0UGFydGljbGVzQWRkZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fZW1pdFBhcnRpY2xlcyh0aGlzLm9wdGlvbnMuc3RhcnRDb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2R1cmF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnREdXJhdGlvbiArPSBkZWx0YS52YWx1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50RHVyYXRpb24gPj0gdGhpcy5fZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3NwYXduRGVsYXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fc3Bhd25EZWxheTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pbW1vcnRhbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9saWZlQ291bnQtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2xpZmVDb3VudCA+IG1pbkxpZmVDb3VudCB8fCB0aGlzLl9pbW1vcnRhbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gdGhpcy5fY2FsY1Bvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NoYXBlPy5yZXNpemUodGhpcy5wb3NpdGlvbiwgdGhpcy5zaXplKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3Bhd25EZWxheSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAoZ2V0UmFuZ2VWYWx1ZSh0aGlzLm9wdGlvbnMubGlmZS5kZWxheSA/PyBkZWZhdWx0TGlmZURlbGF5KSAqIG1pbGxpc2Vjb25kc1RvU2Vjb25kcykgL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnJldGluYS5yZWR1Y2VGYWN0b3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnREdXJhdGlvbiAtPSB0aGlzLl9kdXJhdGlvbjtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fZHVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3NwYXduRGVsYXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFNwYXduRGVsYXkgKz0gZGVsdGEudmFsdWU7XG4gICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudFNwYXduRGVsYXkgPj0gdGhpcy5fc3Bhd25EZWxheSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VuZ2luZS5kaXNwYXRjaEV2ZW50KFwiZW1pdHRlclBsYXlcIiwge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IHRoaXMuY29udGFpbmVyLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucGxheSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRTcGF3bkRlbGF5IC09IHRoaXMuX2N1cnJlbnRTcGF3bkRlbGF5O1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9zcGF3bkRlbGF5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9lbWl0RGVsYXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudEVtaXREZWxheSArPSBkZWx0YS52YWx1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50RW1pdERlbGF5ID49IHRoaXMuX2VtaXREZWxheSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50RW1pdERlbGF5IC09IHRoaXMuX2VtaXREZWxheTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfY2FsY1Bvc2l0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRvbUlkKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5vcHRpb25zLmRvbUlkKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxSZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgcHhSYXRpbyA9IHRoaXMuY29udGFpbmVyLnJldGluYS5waXhlbFJhdGlvO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHg6IChlbFJlY3QueCArIGVsUmVjdC53aWR0aCAqIGhhbGYpICogcHhSYXRpbyxcbiAgICAgICAgICAgICAgICAgICAgeTogKGVsUmVjdC55ICsgZWxSZWN0LmhlaWdodCAqIGhhbGYpICogcHhSYXRpbyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWxjUG9zaXRpb25PclJhbmRvbUZyb21TaXplUmFuZ2VkKHtcbiAgICAgICAgICAgIHNpemU6IHRoaXMuY29udGFpbmVyLmNhbnZhcy5zaXplLFxuICAgICAgICAgICAgcG9zaXRpb246IHRoaXMub3B0aW9ucy5wb3NpdGlvbixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9jYWxjU2l6ZSgpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZG9tSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLm9wdGlvbnMuZG9tSWQpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbFJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBlbFJlY3Qud2lkdGggKiBjb250YWluZXIucmV0aW5hLnBpeGVsUmF0aW8sXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogZWxSZWN0LmhlaWdodCAqIGNvbnRhaW5lci5yZXRpbmEucGl4ZWxSYXRpbyxcbiAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJwcmVjaXNlXCIsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKHRoaXMub3B0aW9ucy5zaXplID8/XG4gICAgICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpemUgPSBuZXcgRW1pdHRlclNpemUoKTtcbiAgICAgICAgICAgICAgICBzaXplLmxvYWQoe1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIG1vZGU6IFwicGVyY2VudFwiLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICAgICAgICAgIH0pKCkpO1xuICAgIH1cbiAgICBfZW1pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3BhdXNlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHF1YW50aXR5ID0gZ2V0UmFuZ2VWYWx1ZSh0aGlzLm9wdGlvbnMucmF0ZS5xdWFudGl0eSk7XG4gICAgICAgIHRoaXMuX2VtaXRQYXJ0aWNsZXMocXVhbnRpdHkpO1xuICAgIH1cbiAgICBfZW1pdFBhcnRpY2xlcyhxdWFudGl0eSkge1xuICAgICAgICBjb25zdCBzaW5nbGVQYXJ0aWNsZXNPcHRpb25zID0gaXRlbUZyb21TaW5nbGVPck11bHRpcGxlKHRoaXMuX3BhcnRpY2xlc09wdGlvbnMpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF1YW50aXR5OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnRpY2xlc09wdGlvbnMgPSBkZWVwRXh0ZW5kKHt9LCBzaW5nbGVQYXJ0aWNsZXNPcHRpb25zKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNwYXduQ29sb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBoc2xBbmltYXRpb24gPSB0aGlzLm9wdGlvbnMuc3Bhd25Db2xvcj8uYW5pbWF0aW9uO1xuICAgICAgICAgICAgICAgIGlmIChoc2xBbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF4VmFsdWVzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaDogMzYwLFxuICAgICAgICAgICAgICAgICAgICAgICAgczogMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbDogMTAwLFxuICAgICAgICAgICAgICAgICAgICB9LCBjb2xvckZhY3RvciA9IDMuNjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGF3bkNvbG9yLmggPSB0aGlzLl9zZXRDb2xvckFuaW1hdGlvbihoc2xBbmltYXRpb24uaCwgdGhpcy5zcGF3bkNvbG9yLmgsIG1heFZhbHVlcy5oLCBjb2xvckZhY3Rvcik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3Bhd25Db2xvci5zID0gdGhpcy5fc2V0Q29sb3JBbmltYXRpb24oaHNsQW5pbWF0aW9uLnMsIHRoaXMuc3Bhd25Db2xvci5zLCBtYXhWYWx1ZXMucyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3Bhd25Db2xvci5sID0gdGhpcy5fc2V0Q29sb3JBbmltYXRpb24oaHNsQW5pbWF0aW9uLmwsIHRoaXMuc3Bhd25Db2xvci5sLCBtYXhWYWx1ZXMubCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNldFBhcnRpY2xlc09wdGlvbnNDb2xvcihwYXJ0aWNsZXNPcHRpb25zLCB0aGlzLnNwYXduQ29sb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2hhcGVPcHRpb25zID0gdGhpcy5vcHRpb25zLnNoYXBlO1xuICAgICAgICAgICAgbGV0IHBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbjtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zaGFwZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNoYXBlUG9zRGF0YSA9IHRoaXMuX3NoYXBlLnJhbmRvbVBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlUG9zRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHNoYXBlUG9zRGF0YS5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVwbGFjZURhdGEgPSBzaGFwZU9wdGlvbnMucmVwbGFjZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcGxhY2VEYXRhLmNvbG9yICYmIHNoYXBlUG9zRGF0YS5jb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFydGljbGVzT3B0aW9uc0NvbG9yKHBhcnRpY2xlc09wdGlvbnMsIHNoYXBlUG9zRGF0YS5jb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcGxhY2VEYXRhLm9wYWNpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0aWNsZXNPcHRpb25zLm9wYWNpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0aWNsZXNPcHRpb25zLm9wYWNpdHkudmFsdWUgPSBzaGFwZVBvc0RhdGEub3BhY2l0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlc09wdGlvbnMub3BhY2l0eSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHNoYXBlUG9zRGF0YS5vcGFjaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5wYXJ0aWNsZXMuYWRkUGFydGljbGUocG9zaXRpb24sIHBhcnRpY2xlc09wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9