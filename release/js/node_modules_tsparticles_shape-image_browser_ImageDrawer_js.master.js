"use strict";
(self["webpackChunkvshb_local"] = self["webpackChunkvshb_local"] || []).push([["node_modules_tsparticles_shape-image_browser_ImageDrawer_js"],{

/***/ "./node_modules/@tsparticles/shape-image/browser/ImageDrawer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tsparticles/shape-image/browser/ImageDrawer.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ImageDrawer: () => (/* binding */ ImageDrawer)
/* harmony export */ });
/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ "./node_modules/@tsparticles/engine/browser/index.js");
/* harmony import */ var _Utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils.js */ "./node_modules/@tsparticles/shape-image/browser/Utils.js");
/* harmony import */ var _GifUtils_Utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GifUtils/Utils.js */ "./node_modules/@tsparticles/shape-image/browser/GifUtils/Utils.js");



const double = 2, defaultAlpha = 1, sides = 12, defaultRatio = 1;
class ImageDrawer {
    constructor(engine) {
        this.loadImageShape = async (imageShape) => {
            if (!this._engine.loadImage) {
                throw new Error(`${_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.errorPrefix} image shape not initialized`);
            }
            await this._engine.loadImage({
                gif: imageShape.gif,
                name: imageShape.name,
                replaceColor: imageShape.replaceColor ?? false,
                src: imageShape.src,
            });
        };
        this._engine = engine;
    }
    addImage(image) {
        if (!this._engine.images) {
            this._engine.images = [];
        }
        this._engine.images.push(image);
    }
    draw(data) {
        const { context, radius, particle, opacity } = data, image = particle.image, element = image?.element;
        if (!image) {
            return;
        }
        context.globalAlpha = opacity;
        if (image.gif && image.gifData) {
            (0,_GifUtils_Utils_js__WEBPACK_IMPORTED_MODULE_2__.drawGif)(data);
        }
        else if (element) {
            const ratio = image.ratio, pos = {
                x: -radius,
                y: -radius,
            }, diameter = radius * double;
            context.drawImage(element, pos.x, pos.y, diameter, diameter / ratio);
        }
        context.globalAlpha = defaultAlpha;
    }
    getSidesCount() {
        return sides;
    }
    async init(container) {
        const options = container.actualOptions;
        if (!options.preload || !this._engine.loadImage) {
            return;
        }
        for (const imageData of options.preload) {
            await this._engine.loadImage(imageData);
        }
    }
    loadShape(particle) {
        if (particle.shape !== "image" && particle.shape !== "images") {
            return;
        }
        if (!this._engine.images) {
            this._engine.images = [];
        }
        const imageData = particle.shapeData;
        if (!imageData) {
            return;
        }
        const image = this._engine.images.find((t) => t.name === imageData.name || t.source === imageData.src);
        if (!image) {
            void this.loadImageShape(imageData).then(() => {
                this.loadShape(particle);
            });
        }
    }
    particleInit(container, particle) {
        if (particle.shape !== "image" && particle.shape !== "images") {
            return;
        }
        if (!this._engine.images) {
            this._engine.images = [];
        }
        const images = this._engine.images, imageData = particle.shapeData;
        if (!imageData) {
            return;
        }
        const color = particle.getFillColor(), image = images.find((t) => t.name === imageData.name || t.source === imageData.src);
        if (!image) {
            return;
        }
        const replaceColor = imageData.replaceColor ?? image.replaceColor;
        if (image.loading) {
            setTimeout(() => {
                this.particleInit(container, particle);
            });
            return;
        }
        void (async () => {
            let imageRes;
            if (image.svgData && color) {
                imageRes = await (0,_Utils_js__WEBPACK_IMPORTED_MODULE_1__.replaceImageColor)(image, imageData, color, particle);
            }
            else {
                imageRes = {
                    color,
                    data: image,
                    element: image.element,
                    gif: image.gif,
                    gifData: image.gifData,
                    gifLoopCount: image.gifLoopCount,
                    loaded: true,
                    ratio: imageData.width && imageData.height
                        ? imageData.width / imageData.height
                        : image.ratio ?? defaultRatio,
                    replaceColor: replaceColor,
                    source: imageData.src,
                };
            }
            if (!imageRes.ratio) {
                imageRes.ratio = 1;
            }
            const fill = imageData.fill ?? particle.shapeFill, close = imageData.close ?? particle.shapeClose, imageShape = {
                image: imageRes,
                fill,
                close,
            };
            particle.image = imageShape.image;
            particle.shapeFill = imageShape.fill;
            particle.shapeClose = imageShape.close;
        })();
    }
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX3RzcGFydGljbGVzX3NoYXBlLWltYWdlX2Jyb3dzZXJfSW1hZ2VEcmF3ZXJfanMubWFzdGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBa0Q7QUFDSDtBQUNEO0FBQzlDO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsNERBQVcsRUFBRTtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscUNBQXFDO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDJEQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsNERBQWlCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92c2hiLmxvY2FsLy4vbm9kZV9tb2R1bGVzL0B0c3BhcnRpY2xlcy9zaGFwZS1pbWFnZS9icm93c2VyL0ltYWdlRHJhd2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVycm9yUHJlZml4IH0gZnJvbSBcIkB0c3BhcnRpY2xlcy9lbmdpbmVcIjtcbmltcG9ydCB7IHJlcGxhY2VJbWFnZUNvbG9yIH0gZnJvbSBcIi4vVXRpbHMuanNcIjtcbmltcG9ydCB7IGRyYXdHaWYgfSBmcm9tIFwiLi9HaWZVdGlscy9VdGlscy5qc1wiO1xuY29uc3QgZG91YmxlID0gMiwgZGVmYXVsdEFscGhhID0gMSwgc2lkZXMgPSAxMiwgZGVmYXVsdFJhdGlvID0gMTtcbmV4cG9ydCBjbGFzcyBJbWFnZURyYXdlciB7XG4gICAgY29uc3RydWN0b3IoZW5naW5lKSB7XG4gICAgICAgIHRoaXMubG9hZEltYWdlU2hhcGUgPSBhc3luYyAoaW1hZ2VTaGFwZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9lbmdpbmUubG9hZEltYWdlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2Vycm9yUHJlZml4fSBpbWFnZSBzaGFwZSBub3QgaW5pdGlhbGl6ZWRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2VuZ2luZS5sb2FkSW1hZ2Uoe1xuICAgICAgICAgICAgICAgIGdpZjogaW1hZ2VTaGFwZS5naWYsXG4gICAgICAgICAgICAgICAgbmFtZTogaW1hZ2VTaGFwZS5uYW1lLFxuICAgICAgICAgICAgICAgIHJlcGxhY2VDb2xvcjogaW1hZ2VTaGFwZS5yZXBsYWNlQ29sb3IgPz8gZmFsc2UsXG4gICAgICAgICAgICAgICAgc3JjOiBpbWFnZVNoYXBlLnNyYyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9lbmdpbmUgPSBlbmdpbmU7XG4gICAgfVxuICAgIGFkZEltYWdlKGltYWdlKSB7XG4gICAgICAgIGlmICghdGhpcy5fZW5naW5lLmltYWdlcykge1xuICAgICAgICAgICAgdGhpcy5fZW5naW5lLmltYWdlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2VuZ2luZS5pbWFnZXMucHVzaChpbWFnZSk7XG4gICAgfVxuICAgIGRyYXcoZGF0YSkge1xuICAgICAgICBjb25zdCB7IGNvbnRleHQsIHJhZGl1cywgcGFydGljbGUsIG9wYWNpdHkgfSA9IGRhdGEsIGltYWdlID0gcGFydGljbGUuaW1hZ2UsIGVsZW1lbnQgPSBpbWFnZT8uZWxlbWVudDtcbiAgICAgICAgaWYgKCFpbWFnZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBvcGFjaXR5O1xuICAgICAgICBpZiAoaW1hZ2UuZ2lmICYmIGltYWdlLmdpZkRhdGEpIHtcbiAgICAgICAgICAgIGRyYXdHaWYoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgcmF0aW8gPSBpbWFnZS5yYXRpbywgcG9zID0ge1xuICAgICAgICAgICAgICAgIHg6IC1yYWRpdXMsXG4gICAgICAgICAgICAgICAgeTogLXJhZGl1cyxcbiAgICAgICAgICAgIH0sIGRpYW1ldGVyID0gcmFkaXVzICogZG91YmxlO1xuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoZWxlbWVudCwgcG9zLngsIHBvcy55LCBkaWFtZXRlciwgZGlhbWV0ZXIgLyByYXRpbyk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IGRlZmF1bHRBbHBoYTtcbiAgICB9XG4gICAgZ2V0U2lkZXNDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHNpZGVzO1xuICAgIH1cbiAgICBhc3luYyBpbml0KGNvbnRhaW5lcikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gY29udGFpbmVyLmFjdHVhbE9wdGlvbnM7XG4gICAgICAgIGlmICghb3B0aW9ucy5wcmVsb2FkIHx8ICF0aGlzLl9lbmdpbmUubG9hZEltYWdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBpbWFnZURhdGEgb2Ygb3B0aW9ucy5wcmVsb2FkKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9lbmdpbmUubG9hZEltYWdlKGltYWdlRGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbG9hZFNoYXBlKHBhcnRpY2xlKSB7XG4gICAgICAgIGlmIChwYXJ0aWNsZS5zaGFwZSAhPT0gXCJpbWFnZVwiICYmIHBhcnRpY2xlLnNoYXBlICE9PSBcImltYWdlc1wiKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9lbmdpbmUuaW1hZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLl9lbmdpbmUuaW1hZ2VzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW1hZ2VEYXRhID0gcGFydGljbGUuc2hhcGVEYXRhO1xuICAgICAgICBpZiAoIWltYWdlRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGltYWdlID0gdGhpcy5fZW5naW5lLmltYWdlcy5maW5kKCh0KSA9PiB0Lm5hbWUgPT09IGltYWdlRGF0YS5uYW1lIHx8IHQuc291cmNlID09PSBpbWFnZURhdGEuc3JjKTtcbiAgICAgICAgaWYgKCFpbWFnZSkge1xuICAgICAgICAgICAgdm9pZCB0aGlzLmxvYWRJbWFnZVNoYXBlKGltYWdlRGF0YSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkU2hhcGUocGFydGljbGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGFydGljbGVJbml0KGNvbnRhaW5lciwgcGFydGljbGUpIHtcbiAgICAgICAgaWYgKHBhcnRpY2xlLnNoYXBlICE9PSBcImltYWdlXCIgJiYgcGFydGljbGUuc2hhcGUgIT09IFwiaW1hZ2VzXCIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2VuZ2luZS5pbWFnZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2VuZ2luZS5pbWFnZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbWFnZXMgPSB0aGlzLl9lbmdpbmUuaW1hZ2VzLCBpbWFnZURhdGEgPSBwYXJ0aWNsZS5zaGFwZURhdGE7XG4gICAgICAgIGlmICghaW1hZ2VEYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29sb3IgPSBwYXJ0aWNsZS5nZXRGaWxsQ29sb3IoKSwgaW1hZ2UgPSBpbWFnZXMuZmluZCgodCkgPT4gdC5uYW1lID09PSBpbWFnZURhdGEubmFtZSB8fCB0LnNvdXJjZSA9PT0gaW1hZ2VEYXRhLnNyYyk7XG4gICAgICAgIGlmICghaW1hZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXBsYWNlQ29sb3IgPSBpbWFnZURhdGEucmVwbGFjZUNvbG9yID8/IGltYWdlLnJlcGxhY2VDb2xvcjtcbiAgICAgICAgaWYgKGltYWdlLmxvYWRpbmcpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGFydGljbGVJbml0KGNvbnRhaW5lciwgcGFydGljbGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdm9pZCAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGltYWdlUmVzO1xuICAgICAgICAgICAgaWYgKGltYWdlLnN2Z0RhdGEgJiYgY29sb3IpIHtcbiAgICAgICAgICAgICAgICBpbWFnZVJlcyA9IGF3YWl0IHJlcGxhY2VJbWFnZUNvbG9yKGltYWdlLCBpbWFnZURhdGEsIGNvbG9yLCBwYXJ0aWNsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbWFnZVJlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3IsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGltYWdlLFxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBpbWFnZS5lbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBnaWY6IGltYWdlLmdpZixcbiAgICAgICAgICAgICAgICAgICAgZ2lmRGF0YTogaW1hZ2UuZ2lmRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgZ2lmTG9vcENvdW50OiBpbWFnZS5naWZMb29wQ291bnQsXG4gICAgICAgICAgICAgICAgICAgIGxvYWRlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcmF0aW86IGltYWdlRGF0YS53aWR0aCAmJiBpbWFnZURhdGEuaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICA/IGltYWdlRGF0YS53aWR0aCAvIGltYWdlRGF0YS5oZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaW1hZ2UucmF0aW8gPz8gZGVmYXVsdFJhdGlvLFxuICAgICAgICAgICAgICAgICAgICByZXBsYWNlQ29sb3I6IHJlcGxhY2VDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiBpbWFnZURhdGEuc3JjLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWltYWdlUmVzLnJhdGlvKSB7XG4gICAgICAgICAgICAgICAgaW1hZ2VSZXMucmF0aW8gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZmlsbCA9IGltYWdlRGF0YS5maWxsID8/IHBhcnRpY2xlLnNoYXBlRmlsbCwgY2xvc2UgPSBpbWFnZURhdGEuY2xvc2UgPz8gcGFydGljbGUuc2hhcGVDbG9zZSwgaW1hZ2VTaGFwZSA9IHtcbiAgICAgICAgICAgICAgICBpbWFnZTogaW1hZ2VSZXMsXG4gICAgICAgICAgICAgICAgZmlsbCxcbiAgICAgICAgICAgICAgICBjbG9zZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwYXJ0aWNsZS5pbWFnZSA9IGltYWdlU2hhcGUuaW1hZ2U7XG4gICAgICAgICAgICBwYXJ0aWNsZS5zaGFwZUZpbGwgPSBpbWFnZVNoYXBlLmZpbGw7XG4gICAgICAgICAgICBwYXJ0aWNsZS5zaGFwZUNsb3NlID0gaW1hZ2VTaGFwZS5jbG9zZTtcbiAgICAgICAgfSkoKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=